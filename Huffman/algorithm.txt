*----------------------Rules-----------------*
1-Your input will be from a file and you'll output the compression and decompression results in a file
2- You cannot re-use the huffman table or encoding inside the program. Hence, you are required to output the encoded string and the table in a file



*------------------Steps---------------*
Compression
1-build frequency dictionary
2-build pririty queue containing frequency values "MinHeap" so that when extracting the elements from the heap we extract the min
3-build huffman tree by selecting 2 min nodes from the queue and keep merging until only  node left
4-perform tree traversal from root to assign codes to charecters
5- encode input text "text => bit stream"
6- output text containing encoded data and huffman table


Decompression
1- read output text file
2- decode by replacing valid huffman codes with their values from the table
3- save to output file
the decoding of the text is done using the same tree generated by the Huffman technique.

The variable-length codes assigned to input characters are Prefix Codes, means the codes (bit sequences) are assigned in such a way that the code assigned to one character is not the prefix of code assigned to any other character. This is how Huffman Coding makes sure that there is no ambiguity when decoding the generated bitstream. 

Huffman coding is a greedy algorithm frequently used for lossless data compression. Therefore, a basic principle of Huffman coding is to compress and encode the text or the data depending on the frequency of the characters in the text.